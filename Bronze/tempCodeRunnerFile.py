# N*M 크기의 두 행렬의 덧셈을 수행하는 프로그램
# numpy를 사용하지 않고 순수 파이썬 리스트로 구현

# 행렬의 크기 N, M 입력 받기
N, M = map(int, input().split())

# 빈 2차원 리스트(행렬) A, B 생성
# 리스트 컴프리헨션을 사용하여 N*M 크기의 2차원 리스트 초기화
A = [[0 for _ in range(M)] for _ in range(N)]
B = [[0 for _ in range(M)] for _ in range(N)]

# 행렬 A 입력 받기
for i in range(N):
   # 한 줄을 입력받아 공백으로 분리하고 정수로 변환하여 저장
   A[i] = list(map(int, input().split()))

# 행렬 B 입력 받기
for i in range(N):
   B[i] = list(map(int, input().split()))

# 두 행렬의 덧셈 수행 및 결과 출력
for i in range(N):
   for j in range(M):
       # end=" "를 사용하여 각 숫자를 공백으로 구분
       print(A[i][j] + B[i][j], end=" ")
   # 한 행이 끝나면 줄바꿈
   print()

'''
이 코드는 C++와 달리 파이썬의 특징을 잘 보여주는 예시입니다.

1. 메모리 관리의 차이:
  - 파이썬은 자동으로 메모리를 관리(garbage collection)하므로 
    C++처럼 명시적인 메모리 할당과 해제가 필요 없습니다.
  - 리스트는 동적으로 크기가 조절되므로 미리 크기를 지정할 필요가 없습니다.

2. 리스트 컴프리헨션:
  - [[0 for _ in range(M)] for _ in range(N)]와 같은 문법으로
    간단하게 2차원 리스트를 생성할 수 있습니다.
  - C++의 이중 포인터로 구현한 2차원 배열과 같은 역할을 합니다.

3. 입력 처리의 편의성:
  - map()과 split() 함수를 활용하여 간단하게 입력을 처리할 수 있습니다.
  - C++처럼 타입을 명시적으로 선언할 필요가 없습니다.

4. 출력 형식 지정:
  - print()의 end 파라미터를 활용하여 출력 형식을 쉽게 지정할 수 있습니다.

파이썬은 C++와 비교했을 때 코드가 더 간결하고 읽기 쉽습니다. 
특히 메모리 관리를 자동으로 해주고, 리스트 컴프리헨션과 같은 
강력한 문법을 제공하여 2차원 배열(리스트) 처리를 훨씬 쉽게 
할 수 있습니다. 다만, 실행 속도 면에서는 C++보다 느리다는 
단점이 있습니다. 이러한 특징들을 이해하고 적절히 활용하면 
효율적인 프로그래밍이 가능합니다.
'''